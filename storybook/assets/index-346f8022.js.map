{"version":3,"file":"index-346f8022.js","sources":["../../src/recoil/cart/selector/withCartTotalPrice.ts","../../src/utils/coupon/coupon.ts","../../src/utils/coupon/fetchCoupon.ts","../../src/recoil/coupon/selector/getCouponListSelector.ts","../../src/recoil/coupon/couponState.ts","../../src/recoil/coupon/selector/withAvailableCoupon.ts","../../src/components/cart/CouponList/index.tsx"],"sourcesContent":["import { selector } from 'recoil';\nimport { calculateSelectCartTotalPrice } from '@utils/cart/cart';\nimport cartState from '../cartState';\n\nconst withCartTotalPrice = selector({\n  key: 'withCartTotalPrice',\n  get: ({ get }) => {\n    const cart = get(cartState);\n\n    return calculateSelectCartTotalPrice(cart);\n  },\n});\n\nexport default withCartTotalPrice;\n","import { getPercentageNumber } from '@utils/common';\nimport { CouponType, ServerCouponType } from '@type/couponType';\n\ninterface GetAvailableCouponsByTotalPriceParams {\n  coupons: CouponType[];\n  totalItemsPrice: number;\n}\n\nexport const getAvailableCouponsByTotalPrice = ({\n  coupons,\n  totalItemsPrice,\n}: GetAvailableCouponsByTotalPriceParams) => {\n  if (totalItemsPrice === 0) return [];\n\n  return coupons.filter((coupon) => coupon.minimumPrice <= totalItemsPrice);\n};\n\ninterface GetDiscountedTotalPriceParams {\n  coupon: CouponType;\n  deliveryFee: number;\n  totalItemsPrice: number;\n}\n\nexport const getDiscountedTotalPrice = ({\n  coupon,\n  deliveryFee,\n  totalItemsPrice,\n}: GetDiscountedTotalPriceParams) => {\n  if (totalItemsPrice === 0) {\n    throw new Error('총 상품 가격이 0원이여서 쿠폰을 사용할 수 없습니다.');\n  }\n\n  return (\n    totalItemsPrice +\n    deliveryFee -\n    Math.min(totalItemsPrice, getDiscountPrice({ totalItemsPrice, coupon }))\n  );\n};\n\ninterface GetDiscountPriceParams {\n  totalItemsPrice: number;\n  coupon: CouponType;\n}\n\nexport const getDiscountPrice = ({ totalItemsPrice, coupon }: GetDiscountPriceParams) => {\n  if (totalItemsPrice === 0) return 0;\n  if (totalItemsPrice < coupon.minimumPrice) return 0;\n\n  if (coupon.type === 'percent') {\n    const result = getPercentageNumber({ total: totalItemsPrice, percent: coupon.value });\n\n    return result ?? 0;\n  }\n\n  if (coupon.type === 'price') {\n    return Math.min(coupon.value, totalItemsPrice);\n  }\n\n  return coupon.value;\n};\n\nexport const couponApiWrapper = (coupons: ServerCouponType[]): CouponType[] => {\n  return coupons.map((coupon) => ({\n    id: coupon.id,\n    name: coupon.name,\n    type: coupon.type,\n    value: coupon.value,\n    minimumPrice: coupon.minimumPrice,\n  }));\n};\n","import { fetchGet } from '@utils/fetchUtils';\nimport { ServerName, getCouponPath } from '@constants/serverUrlConstants';\nimport { UserInformationType } from '@constants/userConstant';\nimport { ServerCouponType } from '@type/couponType';\nimport { couponApiWrapper } from './coupon';\n\ninterface GetCouponProps {\n  serverName: ServerName;\n  userInfo: UserInformationType;\n}\n\nexport const getCouponApi = async ({ serverName, userInfo }: GetCouponProps) => {\n  const serverCoupon = await fetchGet<ServerCouponType[]>(getCouponPath(serverName), {\n    email: userInfo.email,\n    password: userInfo.password,\n  });\n  const clientCoupon = couponApiWrapper(serverCoupon);\n\n  return clientCoupon;\n};\n","import { selector } from 'recoil';\nimport serverState from '@recoil/server/serverState';\nimport userState from '@recoil/user/userState';\nimport { getCouponApi } from '@utils/coupon/fetchCoupon';\nimport { CouponType } from '@type/couponType';\n\nexport const getCouponListSelector = selector<CouponType[]>({\n  key: 'getCouponListSelector',\n  get: async ({ get }) => {\n    const userInfo = get(userState);\n    const serverName = get(serverState);\n    const couponList = await getCouponApi({ serverName, userInfo });\n\n    return couponList;\n  },\n  cachePolicy_UNSTABLE: { eviction: 'most-recent' },\n});\n","import { atom } from 'recoil';\nimport { CouponType } from '@type/couponType';\nimport { getCouponListSelector } from './selector/getCouponListSelector';\n\nconst couponState = atom<CouponType[]>({\n  key: 'couponState',\n  default: getCouponListSelector,\n});\n\nexport default couponState;\n","import { selector } from 'recoil';\nimport withCartTotalPrice from '@recoil/cart/selector/withCartTotalPrice';\nimport { getAvailableCouponsByTotalPrice } from '@utils/coupon/coupon';\nimport couponState from '../couponState';\n\nconst withAvailableCoupon = selector({\n  key: 'availableCoupon',\n  get: ({ get }) => {\n    const coupons = get(couponState);\n    const totalItemsPrice = get(withCartTotalPrice);\n\n    return getAvailableCouponsByTotalPrice({\n      coupons,\n      totalItemsPrice,\n    });\n  },\n});\n\nexport default withAvailableCoupon;\n","import { useRecoilValue } from 'recoil';\nimport { styled } from 'styled-components';\nimport withAvailableCoupon from '@recoil/coupon/selector/withAvailableCoupon';\nimport { CouponType } from '@type/couponType';\nimport CouponItem from './CouponItem';\n\ninterface CouponListProps {\n  onCouponSelect: (coupon: CouponType) => void;\n  selectedCoupon: CouponType | null;\n}\n\nfunction CouponList({ onCouponSelect, selectedCoupon }: CouponListProps) {\n  const coupons = useRecoilValue(withAvailableCoupon);\n\n  return (\n    <Container>\n      {coupons.map((coupon) => (\n        <CouponItem\n          onCouponSelect={() => onCouponSelect(coupon)}\n          key={coupon.id}\n          condition={coupon.minimumPrice}\n          discountValue={coupon.value}\n          selected={selectedCoupon?.id === coupon.id}\n          {...coupon}\n        />\n      ))}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  justify-content: center;\n\n  gap: 5rem;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.md}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.lg}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.xl}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n\nexport default CouponList;\n"],"names":["withCartTotalPrice","selector","get","cart","cartState","calculateSelectCartTotalPrice","getAvailableCouponsByTotalPrice","coupons","totalItemsPrice","coupon","getDiscountPrice","getPercentageNumber","couponApiWrapper","getCouponApi","serverName","userInfo","serverCoupon","fetchGet","getCouponPath","getCouponListSelector","userState","serverState","couponState","atom","withAvailableCoupon","CouponList","onCouponSelect","selectedCoupon","useRecoilValue","jsx","Container","CouponItem","styled","theme"],"mappings":"iXAIA,MAAMA,EAAqBC,EAAS,CAClC,IAAK,qBACL,IAAK,CAAC,CAAE,IAAAC,KAAU,CACV,MAAAC,EAAOD,EAAIE,CAAS,EAE1B,OAAOC,EAA8BF,CAAI,CAC3C,CACF,CAAC,ECHYG,EAAkC,CAAC,CAC9C,QAAAC,EACA,gBAAAC,CACF,IACMA,IAAoB,EAAU,GAE3BD,EAAQ,OAAQE,GAAWA,EAAO,cAAgBD,CAAe,EA8B7DE,EAAmB,CAAC,CAAE,gBAAAF,EAAiB,OAAAC,KAC9CD,IAAoB,GACpBA,EAAkBC,EAAO,aAAqB,EAE9CA,EAAO,OAAS,UACHE,EAAoB,CAAE,MAAOH,EAAiB,QAASC,EAAO,MAAO,GAEnE,EAGfA,EAAO,OAAS,QACX,KAAK,IAAIA,EAAO,MAAOD,CAAe,EAGxCC,EAAO,MAGHG,EAAoBL,GACxBA,EAAQ,IAAKE,IAAY,CAC9B,GAAIA,EAAO,GACX,KAAMA,EAAO,KACb,KAAMA,EAAO,KACb,MAAOA,EAAO,MACd,aAAcA,EAAO,YACrB,EAAA,ECzDSI,EAAe,MAAO,CAAE,WAAAC,EAAY,SAAAC,KAA+B,CAC9E,MAAMC,EAAe,MAAMC,EAA6BC,EAAcJ,CAAU,EAAG,CACjF,MAAOC,EAAS,MAChB,SAAUA,EAAS,QAAA,CACpB,EAGM,OAFcH,EAAiBI,CAAY,CAGpD,ECbaG,EAAwBlB,EAAuB,CAC1D,IAAK,wBACL,IAAK,MAAO,CAAE,IAAAC,KAAU,CAChB,MAAAa,EAAWb,EAAIkB,CAAS,EACxBN,EAAaZ,EAAImB,CAAW,EAG3B,OAFY,MAAMR,EAAa,CAAE,WAAAC,EAAY,SAAAC,CAAU,CAAA,CAGhE,EACA,qBAAsB,CAAE,SAAU,aAAc,CAClD,CAAC,ECZKO,EAAcC,EAAmB,CACrC,IAAK,cACL,QAASJ,CACX,CAAC,ECFKK,EAAsBvB,EAAS,CACnC,IAAK,kBACL,IAAK,CAAC,CAAE,IAAAC,KAAU,CACV,MAAAK,EAAUL,EAAIoB,CAAW,EACzBd,EAAkBN,EAAIF,CAAkB,EAE9C,OAAOM,EAAgC,CACrC,QAAAC,EACA,gBAAAC,CAAA,CACD,CACH,CACF,CAAC,ECLD,SAAAiB,EAAA,CAAA,eAAAC,EAAA,eAAAC,GAAA,CACE,MAAApB,EAAAqB,EAAAJ,CAAA,EAEA,OAAAK,EAAAA,IAAAC,EAAA,CAAA,SAAAvB,EAAA,IAAAE,GAAAoB,EAAA,IAGME,EAAC,CAAA,eAAA,IAAAL,EAAAjB,CAAA,EAC4C,UAAAA,EAAA,aAEzB,cAAAA,EAAA,MACI,UAAAkB,GAAA,YAAAA,EAAA,MAAAlB,EAAA,GACkB,GAAAA,CACpC,EAAAA,EAAA,EAJQ,CAAA,CAAA,CAAA,CAStB,CAEA,MAAAqB,EAAAE,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAyB,CAAA,CAAA,MAAAC,CAAA,IAAAA,EAAA,YAAA;AAAA;AAAA;AAAA;AAAA,kCAO0C,CAAA,CAAA,MAAAA,CAAA,IAAAA,EAAA,YAAA;AAAA;AAAA;AAAA;AAAA,kCAIA,CAAA,CAAA,MAAAA,CAAA,IAAAA,EAAA,YAAA;AAAA;AAAA;AAAA"}