{"version":3,"file":"fetchCart-d222eaeb.js","sources":["../../src/recoil/cart/cartState.ts","../../src/constants/serverUrlConstants.tsx","../../src/recoil/server/serverState.ts","../../src/utils/productList/productList.ts","../../src/constants/cartConstants.ts","../../src/utils/cart/cart.ts","../../src/utils/fetchUtils.ts","../../src/utils/cart/fetchCart.ts"],"sourcesContent":["import { atom } from 'recoil';\nimport { CartItemType } from '@type/cartType';\n\nconst cartState = atom<CartItemType[]>({\n  key: 'cartState',\n  default: [],\n});\n\nexport default cartState;\n","export const SERVER_NAME = ['마코', '허브', '우가'] as const;\n\nexport const SERVER = {\n  [SERVER_NAME[0]]: 'https://m4co.shop',\n  [SERVER_NAME[1]]: 'https://h3rb.shop',\n  [SERVER_NAME[2]]: 'https://wuga.shop',\n} as const;\n\nexport type ServerName = (typeof SERVER_NAME)[number];\n\nexport const getProductPath = (serverName: ServerName) => {\n  return `${SERVER[serverName]}/products`;\n};\n\nexport const getCartPath = (serverName: ServerName) => {\n  return `${SERVER[serverName]}/cart-items`;\n};\n\nexport const getCouponPath = (serverName: ServerName) => {\n  return `${SERVER[serverName]}/coupons`;\n};\n","import { atom } from 'recoil';\nimport { SERVER_NAME, ServerName } from '@constants/serverUrlConstants';\n\nconst serverState = atom<ServerName>({\n  key: 'serverState',\n  default: SERVER_NAME[0],\n});\n\nexport default serverState;\n","import { ProductItemType, ServerProductItemType } from '@type/productType';\n\nexport const productListApiWrapper = (productList: ServerProductItemType[]): ProductItemType[] => {\n  return productList.map((product) => productApiWrapper(product));\n};\n\nexport const productApiWrapper = (product: ServerProductItemType): ProductItemType => {\n  return {\n    id: product.id,\n    name: product.name,\n    price: product.price,\n    imageUrl: product.imageUrl,\n  };\n};\n","export const MIN_CART_QUANTITY = 0;\nexport const MAX_CART_QUANTITY = 99;\n\nexport const QUANTITY_ERROR_MESSAGE = '장바구니 수량은 99까지 가능합니다.';\n\nexport const FAKE_CART_ID = 0;\n","import { productApiWrapper } from '@utils/productList/productList';\nimport { FAKE_CART_ID } from '@constants/cartConstants';\nimport { CartItemType, ServerCartItemType } from '@type/cartType';\nimport { ProductItemType } from '@type/productType';\n\ninterface CreateCartItemParams {\n  cartId: number;\n  product: ProductItemType;\n}\n\nexport const createCartItem = ({ cartId, product }: CreateCartItemParams): CartItemType => {\n  return {\n    id: cartId,\n    quantity: 1,\n    isSelect: true,\n    product,\n  };\n};\n\ninterface AddItemToCartParams {\n  cart: CartItemType[];\n  cartId: number;\n  product: ProductItemType;\n}\n\nexport const addItemToCart = ({ cart, cartId, product }: AddItemToCartParams) => {\n  return [...cart, createCartItem({ cartId, product })];\n};\n\ninterface UpdateCartItemQuantityParams {\n  cart: CartItemType[];\n  cartId: number;\n  quantity: number;\n}\n\nexport const updateCartItemQuantity = ({\n  cart,\n  cartId,\n  quantity,\n}: UpdateCartItemQuantityParams) => {\n  return cart.map((cartItem) => {\n    if (cartItem.id === cartId) {\n      return {\n        ...cartItem,\n        quantity,\n      };\n    }\n\n    return cartItem;\n  });\n};\n\ninterface RemoveCartItemParams {\n  cart: CartItemType[];\n  cartId: number;\n}\n\nexport const removeCartItem = ({ cart, cartId }: RemoveCartItemParams) => {\n  return cart.filter((cartItem) => cartItem.id !== cartId);\n};\n\nexport const cartApiWrapper = (cart: ServerCartItemType[]): CartItemType[] => {\n  return cart.map((cartItem) => {\n    return {\n      id: cartItem.id,\n      quantity: cartItem.quantity,\n      product: productApiWrapper(cartItem.product),\n      isSelect: true,\n    };\n  });\n};\n\ninterface toggleSelectCartItemParams {\n  cart: CartItemType[];\n  cartId: number;\n}\n\nexport const toggleSelectCartItem = ({ cart, cartId }: toggleSelectCartItemParams) => {\n  return cart.map((cartItem) => {\n    if (cartItem.id === cartId) {\n      return { ...cartItem, isSelect: !cartItem.isSelect };\n    }\n\n    return cartItem;\n  });\n};\n\ninterface AllSelectCartItemParams {\n  cart: CartItemType[];\n  isCheck: boolean;\n}\n\nexport const allSelectCartItem = ({ cart, isCheck }: AllSelectCartItemParams) => {\n  return cart.map((cartItem) => {\n    return { ...cartItem, isSelect: isCheck };\n  });\n};\n\nexport const calculateSelectCartTotalPrice = (cart: CartItemType[]) => {\n  return cart.reduce((accumulator, currentValue) => {\n    if (currentValue.isSelect) {\n      return accumulator + currentValue.quantity * currentValue.product.price;\n    }\n\n    return accumulator;\n  }, 0);\n};\n\nexport const cartItemSelectedById = (cart: CartItemType[]) => {\n  return cart.filter((cartItem) => cartItem.isSelect === true).map((cartItem) => cartItem.id);\n};\n\nexport const removeSelectedCartItem = (cart: CartItemType[]) => {\n  return cart.filter((cartItem) => cartItem.isSelect === false);\n};\n\ninterface FindCartItemByIdParams {\n  cart: CartItemType[];\n  productId: number;\n}\n\nexport const findCartItemById = ({ cart, productId }: FindCartItemByIdParams) => {\n  const findCartItem = cart.find((cartItem) => cartItem.product.id === productId);\n\n  if (!findCartItem) {\n    return FAKE_CART_ID;\n  }\n\n  return findCartItem.id;\n};\n","import { CustomError } from 'types/error';\n\nconst username = 'pizza2@pizza.com';\nconst password = 'pizza';\n\nconst base64 = btoa(`${username}:${password}`);\n\nexport const fetchGet = async <T>(url: string, options: RequestInit = {}): Promise<T> => {\n  try {\n    const mergedOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${base64}`,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    const response = await fetch(url, mergedOptions);\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error('리소스를 찾을 수 없습니다');\n      }\n\n      throw new Error(`HTTP 오류! Status: ${response.status}`);\n    }\n\n    return (await response.json()) as T;\n  } catch (error) {\n    const errorMessage = (error as CustomError).message;\n    throw new Error(`Error: ${errorMessage}`);\n  }\n};\n\nexport const fetchPost = async <T>(\n  url: string,\n  body: T,\n  options: RequestInit = {}\n): Promise<Response> => {\n  try {\n    const mergedOptions = {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${base64}`,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    const response = await fetch(url, mergedOptions);\n\n    if (!response.ok) {\n      throw new Error(`POST 요청이 ${response.status} 상태로 실패했습니다.`);\n    }\n\n    return response;\n  } catch (error) {\n    const errorMessage = (error as CustomError).message;\n    throw new Error(`Error: ${errorMessage}`);\n  }\n};\n\nexport const fetchPatch = async <T>(\n  url: string,\n  body: T,\n  options: RequestInit = {}\n): Promise<Response> => {\n  try {\n    const mergedOptions = {\n      method: 'PATCH',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${base64}`,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    const response = await fetch(url, mergedOptions);\n\n    if (!response.ok) {\n      throw new Error(`PATCH 요청이 ${response.status} 상태로 실패했습니다.`);\n    }\n\n    return response;\n  } catch (error) {\n    const errorMessage = (error as CustomError).message;\n    throw new Error(`Error: ${errorMessage}`);\n  }\n};\n\nexport const fetchDelete = async (url: string, options: RequestInit = {}): Promise<Response> => {\n  try {\n    const mergedOptions = {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Basic ${base64}`,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    const response = await fetch(url, mergedOptions);\n\n    if (!response.ok) {\n      throw new Error(`DELETE 요청이 ${response.status} 상태로 실패했습니다.`);\n    }\n\n    return response;\n  } catch (error) {\n    const errorMessage = (error as CustomError).message;\n    throw new Error(`Error: ${errorMessage}`);\n  }\n};\n","import { fetchDelete, fetchGet, fetchPatch, fetchPost } from '@utils/fetchUtils';\nimport { ServerName, getCartPath } from '@constants/serverUrlConstants';\nimport { CartItemType, ServerCartItemType } from '@type/cartType';\nimport { cartApiWrapper } from './cart';\n\ninterface AddItemToCartApiParams {\n  productId: number;\n  serverName: ServerName;\n}\n\ninterface RemoveCartItemApiParams {\n  cartId: number;\n  serverName: ServerName;\n}\n\ninterface UpdateCartItemQuantityApiParams {\n  cartId: number;\n  serverName: ServerName;\n  quantity: number;\n}\n\nexport const addItemToCartApi = async ({ productId, serverName }: AddItemToCartApiParams) => {\n  const response = await fetchPost(getCartPath(serverName), {\n    productId,\n  });\n\n  if (!response) {\n    throw new Error('장바구니에 아이템을 추가하지 못했습니다.');\n  }\n\n  const location = response.headers.get('Location');\n  const cartId = location?.split('/').pop();\n\n  if (!cartId) {\n    throw new Error('장바구니 아이템 생성에 실패했습니다.');\n  }\n\n  return cartId;\n};\n\nexport const removeCartItemApi = async ({ cartId, serverName }: RemoveCartItemApiParams) => {\n  await fetchDelete(`${getCartPath(serverName)}/${cartId}`);\n};\n\nexport const updateCartItemQuantityApi = async ({\n  cartId,\n  serverName,\n  quantity,\n}: UpdateCartItemQuantityApiParams) => {\n  await fetchPatch(`${getCartPath(serverName)}/${cartId}`, { quantity });\n};\n\nexport const getCart = async (serverName: ServerName) => {\n  const serverCart = await fetchGet<ServerCartItemType[]>(getCartPath(serverName));\n  const clientCart: CartItemType[] = cartApiWrapper(serverCart);\n\n  return clientCart;\n};\n"],"names":["cartState","atom","SERVER_NAME","SERVER","getProductPath","serverName","getCartPath","getCouponPath","serverState","productApiWrapper","product","MIN_CART_QUANTITY","MAX_CART_QUANTITY","QUANTITY_ERROR_MESSAGE","FAKE_CART_ID","createCartItem","cartId","addItemToCart","cart","updateCartItemQuantity","quantity","cartItem","removeCartItem","cartApiWrapper","findCartItemById","productId","findCartItem","username","password","base64","fetchGet","url","options","mergedOptions","response","error","errorMessage","fetchPost","body","fetchPatch","fetchDelete","addItemToCartApi","location","removeCartItemApi","updateCartItemQuantityApi","getCart","serverCart"],"mappings":"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"}