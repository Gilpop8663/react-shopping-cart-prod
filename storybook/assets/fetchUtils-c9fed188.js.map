{"version":3,"file":"fetchUtils-c9fed188.js","sources":["../../src/recoil/server/serverState.ts","../../src/constants/userConstant.ts","../../src/recoil/user/userState.ts","../../src/utils/fetchUtils.ts"],"sourcesContent":["import { atom } from 'recoil';\nimport { SERVER_NAME, ServerName } from '@constants/serverUrlConstants';\n\nconst serverState = atom<ServerName>({\n  key: 'serverState',\n  default: SERVER_NAME[0],\n});\n\nexport default serverState;\n","export interface UserInformationType {\n  email: string;\n  password: string;\n  nickname: string;\n}\n\nexport const USER_INFORMATION: UserInformationType[] = [\n  {\n    email: 'pizza1@pizza.com',\n    password: 'pizza',\n    nickname: '토핑왕',\n  },\n  {\n    email: 'pizza2@pizza.com',\n    password: 'pizza',\n    nickname: '치즈러버',\n  },\n];\n","import { atom } from 'recoil';\nimport { USER_INFORMATION, UserInformationType } from '@constants/userConstant';\n\nconst userState = atom<UserInformationType>({\n  key: 'userState',\n  default: USER_INFORMATION[0],\n});\n\nexport default userState;\n","import { CustomError } from 'types/error';\n\ninterface EncodeCredentialsToBase64Props {\n  email: string;\n  password: string;\n}\n\nconst encodeCredentialsToBase64 = ({ email, password }: EncodeCredentialsToBase64Props) => {\n  const credentials = `${email}:${password}`;\n  const encodedCredentials = btoa(credentials);\n\n  return encodedCredentials;\n};\n\nexport interface AuthRequestInitProps extends RequestInit {\n  email: string;\n  password: string;\n}\n\nexport const fetchGet = async <T>(url: string, options: AuthRequestInitProps): Promise<T> => {\n  try {\n    const mergedOptions = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${encodeCredentialsToBase64({\n          email: options.email,\n          password: options.password,\n        })}`,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    const response = await fetch(url, mergedOptions);\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        throw new Error('리소스를 찾을 수 없습니다');\n      }\n\n      throw new Error(`HTTP 오류! Status: ${response.status}`);\n    }\n\n    return (await response.json()) as T;\n  } catch (error) {\n    const errorMessage = (error as CustomError).message;\n    throw new Error(`Error: ${errorMessage}`);\n  }\n};\n\nexport const fetchPost = async <T>(\n  url: string,\n  body: T,\n  options: AuthRequestInitProps\n): Promise<Response> => {\n  try {\n    const mergedOptions = {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${encodeCredentialsToBase64({\n          email: options.email,\n          password: options.password,\n        })}`,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    const response = await fetch(url, mergedOptions);\n\n    if (!response.ok) {\n      throw new Error(`POST 요청이 ${response.status} 상태로 실패했습니다.`);\n    }\n\n    return response;\n  } catch (error) {\n    const errorMessage = (error as CustomError).message;\n    throw new Error(`Error: ${errorMessage}`);\n  }\n};\n\nexport const fetchPatch = async <T>(\n  url: string,\n  body: T,\n  options: AuthRequestInitProps\n): Promise<Response> => {\n  try {\n    const mergedOptions = {\n      method: 'PATCH',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Basic ${encodeCredentialsToBase64({\n          email: options.email,\n          password: options.password,\n        })}`,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    const response = await fetch(url, mergedOptions);\n\n    if (!response.ok) {\n      throw new Error(`PATCH 요청이 ${response.status} 상태로 실패했습니다.`);\n    }\n\n    return response;\n  } catch (error) {\n    const errorMessage = (error as CustomError).message;\n    throw new Error(`Error: ${errorMessage}`);\n  }\n};\n\nexport const fetchDelete = async (\n  url: string,\n  options: AuthRequestInitProps\n): Promise<Response> => {\n  try {\n    const mergedOptions = {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Basic ${encodeCredentialsToBase64({\n          email: options.email,\n          password: options.password,\n        })}`,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    const response = await fetch(url, mergedOptions);\n\n    if (!response.ok) {\n      throw new Error(`DELETE 요청이 ${response.status} 상태로 실패했습니다.`);\n    }\n\n    return response;\n  } catch (error) {\n    const errorMessage = (error as CustomError).message;\n    throw new Error(`Error: ${errorMessage}`);\n  }\n};\n"],"names":["serverState","atom","SERVER_NAME","USER_INFORMATION","userState","encodeCredentialsToBase64","email","password","credentials","fetchGet","url","options","mergedOptions","response","error","errorMessage","fetchPost","body","fetchPatch","fetchDelete"],"mappings":"6FAGA,MAAMA,EAAcC,EAAiB,CACnC,IAAK,cACL,QAASC,EAAY,CAAC,CACxB,CAAC,ECAYC,EAA0C,CACrD,CACE,MAAO,mBACP,SAAU,QACV,SAAU,KACZ,EACA,CACE,MAAO,mBACP,SAAU,QACV,SAAU,MACZ,CACF,ECdMC,EAAYH,EAA0B,CAC1C,IAAK,YACL,QAASE,EAAiB,CAAC,CAC7B,CAAC,ECCKE,EAA4B,CAAC,CAAE,MAAAC,EAAO,SAAAC,KAA+C,CACnF,MAAAC,EAAc,GAAGF,KAASC,IAGzB,OAFoB,KAAKC,CAAW,CAG7C,EAOaC,EAAW,MAAUC,EAAaC,IAA8C,CACvF,GAAA,CACF,MAAMC,EAAgB,CACpB,OAAQ,MACR,QAAS,CACP,eAAgB,mBAChB,cAAe,SAASP,EAA0B,CAChD,MAAOM,EAAQ,MACf,SAAUA,EAAQ,QACnB,CAAA,IACD,GAAGA,EAAQ,OACb,EACA,GAAGA,CAAA,EAGCE,EAAW,MAAM,MAAMH,EAAKE,CAAa,EAE3C,GAAA,CAACC,EAAS,GACR,MAAAA,EAAS,SAAW,IAChB,IAAI,MAAM,gBAAgB,EAG5B,IAAI,MAAM,oBAAoBA,EAAS,QAAQ,EAG/C,OAAA,MAAMA,EAAS,aAChBC,GACP,MAAMC,EAAgBD,EAAsB,QACtC,MAAA,IAAI,MAAM,UAAUC,GAAc,CAC1C,CACF,EAEaC,EAAY,MACvBN,EACAO,EACAN,IACsB,CAClB,GAAA,CACF,MAAMC,EAAgB,CACpB,OAAQ,OACR,KAAM,KAAK,UAAUK,CAAI,EACzB,QAAS,CACP,eAAgB,mBAChB,cAAe,SAASZ,EAA0B,CAChD,MAAOM,EAAQ,MACf,SAAUA,EAAQ,QACnB,CAAA,IACD,GAAGA,EAAQ,OACb,EACA,GAAGA,CAAA,EAGCE,EAAW,MAAM,MAAMH,EAAKE,CAAa,EAE3C,GAAA,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,YAAYA,EAAS,oBAAoB,EAGpD,OAAAA,QACAC,GACP,MAAMC,EAAgBD,EAAsB,QACtC,MAAA,IAAI,MAAM,UAAUC,GAAc,CAC1C,CACF,EAEaG,EAAa,MACxBR,EACAO,EACAN,IACsB,CAClB,GAAA,CACF,MAAMC,EAAgB,CACpB,OAAQ,QACR,KAAM,KAAK,UAAUK,CAAI,EACzB,QAAS,CACP,eAAgB,mBAChB,cAAe,SAASZ,EAA0B,CAChD,MAAOM,EAAQ,MACf,SAAUA,EAAQ,QACnB,CAAA,IACD,GAAGA,EAAQ,OACb,EACA,GAAGA,CAAA,EAGCE,EAAW,MAAM,MAAMH,EAAKE,CAAa,EAE3C,GAAA,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,aAAaA,EAAS,oBAAoB,EAGrD,OAAAA,QACAC,GACP,MAAMC,EAAgBD,EAAsB,QACtC,MAAA,IAAI,MAAM,UAAUC,GAAc,CAC1C,CACF,EAEaI,EAAc,MACzBT,EACAC,IACsB,CAClB,GAAA,CACF,MAAMC,EAAgB,CACpB,OAAQ,SACR,QAAS,CACP,cAAe,SAASP,EAA0B,CAChD,MAAOM,EAAQ,MACf,SAAUA,EAAQ,QACnB,CAAA,IACD,GAAGA,EAAQ,OACb,EACA,GAAGA,CAAA,EAGCE,EAAW,MAAM,MAAMH,EAAKE,CAAa,EAE3C,GAAA,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,cAAcA,EAAS,oBAAoB,EAGtD,OAAAA,QACAC,GACP,MAAMC,EAAgBD,EAAsB,QACtC,MAAA,IAAI,MAAM,UAAUC,GAAc,CAC1C,CACF"}